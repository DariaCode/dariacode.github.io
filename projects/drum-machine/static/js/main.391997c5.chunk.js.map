{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["modeOne","kCode","id","url","modeTwo","App","props","state","power","switch","volume","soundId","changeId","bind","switchMode","powerSwitch","adjustVolume","name","this","setState","e","target","value","DrumPads","map","p","mode","letters","newId","modeSwitch","React","Component","Functionality","onClasses","className","onClick","type","min","max","step","onChange","DrumPad","handleKey","playSound","sound","document","getElementById","Mode","currentTime","play","keyCode","addEventListener","removeEventListener","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAGMA,EAAU,CACd,EAAI,CAAEC,MAAO,GAAIC,GAAI,UAAWC,IAAK,2DACrC,EAAI,CAAEF,MAAO,GAAIC,GAAI,UAAWC,IAAK,2DACrC,EAAI,CAAEF,MAAO,GAAIC,GAAI,UAAWC,IAAK,2DACrC,EAAI,CAAEF,MAAO,GAAIC,GAAI,SAAUC,IAAK,mEACpC,EAAI,CAAEF,MAAO,GAAIC,GAAI,UAAWC,IAAK,2DACrC,EAAI,CAAEF,MAAO,GAAIC,GAAI,YAAaC,IAAK,0DACvC,EAAI,CAAEF,MAAO,GAAIC,GAAI,cAAeC,IAAK,iEACzC,EAAI,CAAEF,MAAO,GAAIC,GAAI,aAAcC,IAAK,gEACxC,EAAI,CAAEF,MAAO,GAAIC,GAAI,QAASC,IAAK,4DAE/BC,EAAU,CACd,EAAI,CAAEH,MAAO,GAAIC,GAAI,WAAYC,IAAI,4DACrC,EAAI,CAAEF,MAAO,GAAIC,GAAI,WAAYC,IAAK,4DACtC,EAAI,CAAEF,MAAO,GAAIC,GAAI,WAAYC,IAAK,4DACtC,EAAI,CAAEF,MAAO,GAAIC,GAAI,WAAYC,IAAK,8DACtC,EAAI,CAAEF,MAAO,GAAIC,GAAI,OAAQC,IAAK,4DAClC,EAAI,CAAEF,MAAO,GAAIC,GAAI,UAAWC,IAAK,0DACrC,EAAI,CAAEF,MAAO,GAAIC,GAAI,cAAeC,IAAK,8DACzC,EAAI,CAAEF,MAAO,GAAIC,GAAI,OAAQC,IAAK,8DAClC,EAAI,CAAEF,MAAO,GAAIC,GAAI,YAAaC,IAAK,2DAInCE,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,OAAO,EACPC,QAAQ,EACRC,OAAQ,KACRC,QAAS,KAEX,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAXJ,E,sEAaTI,GACPC,KAAKC,SAAS,CACZR,QAASM,M,mCAIRC,KAAKX,MAAMC,OACXU,KAAKC,SAAS,CACbV,QAASS,KAAKX,MAAME,W,oCAKxBS,KAAKC,SAAS,CACZX,OAAQU,KAAKX,MAAMC,MACnBG,QAAS,Q,mCAGAS,GACPF,KAAKX,MAAMC,OACbU,KAAKC,SAAS,CACZT,OAAQU,EAAEC,OAAOC,U,+BAKd,IAAD,OAEFC,EADW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KACxBC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAASC,KAAM,EAAKnB,MAAME,OAAQkB,QAASF,EAAGvB,GAAG,UAAU0B,MAAO,EAAKhB,SAAUJ,MAAO,EAAKD,MAAMC,WACtI,OACS,yBAAKN,GAAG,gBACN,kBAAC,EAAD,CAAee,KAAMC,KAAKX,MAAMI,QAC9Be,KAAMR,KAAKX,MAAME,OACjBoB,WAAYX,KAAKJ,WACjBN,MAAOU,KAAKX,MAAMC,MAClBO,YAAaG,KAAKH,YAClBL,OAAQQ,KAAKX,MAAMG,OACnBM,aAAcE,KAAKF,eACpB,yBAAKd,GAAG,SAASqB,Q,GApDfO,IAAMC,WA0DlBC,EAAgB,SAAC1B,GACrB,IAAI2B,EAAY3B,EAAME,MAAO,CAAC,WAAY,UAAU,MAAO,CAAC,YAAa,WAAW,OAChFkB,EAAOpB,EAAMoB,KAAO,QAAS,QACjC,OACE,yBAAKxB,GAAG,WACN,uBAAGA,GAAI+B,EAAU,IAAK3B,EAAMW,MAC5B,yBAAKiB,UAAU,YACf,yBAAKhC,GAAG,OAAOiC,QAAS7B,EAAMuB,YAC5B,6CACA,yBAAK3B,GAAG,eACN,yBAAKA,GAAIwB,MAGb,yBAAKxB,GAAG,QAAQiC,QAAS7B,EAAMS,aAAckB,EAAU,GACvD,yBAAKC,UAAWD,EAAU,OAG1B,yBAAK/B,GAAG,QACR,uCAAcI,EAAME,MAAS,KAAOF,EAAMI,OAAS,IAAM,KACzD,2BAAO0B,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,KAAK,IAAIjB,MAAOhB,EAAMI,OAAQ8B,SAAUlC,EAAMU,kBAMpFyB,E,YACJ,WAAYnC,GAAO,IAAD,8BAChB,4CAAMA,KACDoC,UAAY,EAAKA,UAAU7B,KAAf,gBACjB,EAAK8B,UAAY,EAAKA,UAAU9B,KAAf,gBAHD,E,yEAMhB,GAAGK,KAAKZ,MAAME,MAAM,CAClB,IAAIoC,EAAQC,SAASC,eAAe5B,KAAKZ,MAAMqB,SAC/CT,KAAKZ,MAAMsB,MAAMV,KAAK6B,KAAK7B,KAAKZ,MAAMqB,SAASzB,IAC/C0C,EAAMI,YAAc,EACpBJ,EAAMK,U,gCAGA7B,GACLA,EAAE8B,UAAYhC,KAAK6B,KAAK7B,KAAKZ,MAAMqB,SAAS1B,OAC7CiB,KAAKyB,c,0CAIPE,SAASM,iBAAiB,UAAWjC,KAAKwB,a,6CAG1CG,SAASO,oBAAoB,UAAWlC,KAAKwB,a,+BAG7C,IAAIT,EAAYf,KAAKZ,MAAME,MAAO,cAAe,eAEjD,OADAU,KAAK6B,KAAO7B,KAAKZ,MAAMoB,KAAMtB,EAASJ,EAEpC,yBAAKkC,UAAWD,EAAWE,QAASjB,KAAKyB,UAAWzC,GAAIgB,KAAK6B,KAAK7B,KAAKZ,MAAMqB,SAASzB,IACpF,2BAAIgB,KAAKZ,MAAMqB,SACf,2BAAO0B,IAAKnC,KAAK6B,KAAK7B,KAAKZ,MAAMqB,SAASxB,IAAK+B,UAAU,OAAQhC,GAAIgB,KAAKZ,MAAMqB,e,GA/BlEG,IAAMC,WAuCT1B,ICzICiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASC,eAAe,SD0H3C,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.391997c5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst modeOne = {\n  'Q':{ kCode: 81, id: 'Chord 1', url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'},\n  'W':{ kCode: 87, id: 'Chord 2', url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'},\n  'E':{ kCode: 69, id: 'Chord 3', url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'},\n  'A':{ kCode: 65, id: 'Shaker', url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'},\n  'S':{ kCode: 83, id: 'Open HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'},\n  'D':{ kCode: 68, id: 'Closed HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'},\n  'Z':{ kCode: 90, id: 'Punchy Kick', url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'},\n  'X':{ kCode: 88, id: 'Side Stick', url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'},\n  'C':{ kCode: 67, id: 'Snare', url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'}\n  };\nconst modeTwo = {\n  'Q':{ kCode: 81, id: 'Heater 1', url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'},\n  'W':{ kCode: 87, id: 'Heater 2', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'},\n  'E':{ kCode: 69, id: 'Heater 3', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'},\n  'A':{ kCode: 65, id: 'Heater 4', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'},\n  'S':{ kCode: 83, id: 'Clap', url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'},\n  'D':{ kCode: 68, id: 'Open HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'},\n  'Z':{ kCode: 90, id: \"Kick n' Hat\", url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'},\n  'X':{ kCode: 88, id: 'Kick', url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'},\n  'C':{ kCode: 67, id: 'Closed HH', url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'}\n  };\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      power: true,\n      switch: false,\n      volume: \"50\",\n      soundId: ' '\n    }\n    this.changeId = this.changeId.bind(this);\n    this.switchMode = this.switchMode.bind(this);\n    this.powerSwitch = this.powerSwitch.bind(this);\n    this.adjustVolume = this.adjustVolume.bind(this)\n  }\n  changeId(name){\n    this.setState({\n      soundId: name \n    });\n  }\n  switchMode(){\n    if(this.state.power){\n       this.setState({\n        switch: !this.state.switch\n      });\n    }\n  }\n  powerSwitch(){\n    this.setState({\n      power: !this.state.power,\n      soundId: ' '\n    });\n  }\n  adjustVolume(e){\n    if (this.state.power) {\n      this.setState({\n        volume: e.target.value\n      });\n    }\n    }\n\n  render(){\n    let arrayPad = ['Q','W','E','A','S','D','Z','X','C'];\n    let DrumPads = arrayPad.map((p) => <DrumPad mode={this.state.switch} letters={p} id=\"display\" newId={this.changeId} power={this.state.power}/>);\n    return (\n             <div id='drum-machine'>\n               <Functionality name={this.state.soundId} \n                 mode={this.state.switch}\n                 modeSwitch={this.switchMode}\n                 power={this.state.power}\n                 powerSwitch={this.powerSwitch}\n                 volume={this.state.volume}\n                 adjustVolume={this.adjustVolume} />\n                <div id=\"drums\">{DrumPads}</div>\n             </div>\n    );\n  }\n}\n\nconst Functionality = (props) => {\n  let onClasses = props.power? ['screenOn', 'lightOn','On']: ['screenOff', 'lightOff','Off'];\n  let mode = props.mode ? 'mode2': 'mode1';\n  return (\n    <div id=\"display\">\n      <p id={onClasses[0]}>{props.name}</p>\n      <div className=\"switches\">\n      <div id=\"mode\" onClick={props.modeSwitch}>\n        <span>Mode Switch</span>\n        <div id=\"mode-switch\">\n          <div id={mode}></div>\n        </div>\n      </div>\n      <div id=\"power\" onClick={props.powerSwitch}>{onClasses[2]}\n      <div className={onClasses[1]}></div>\n      </div>\n      </div>\n      <div id=\"mode\">\n      <span>Volume{(props.power) ? \": \" + props.volume + \"%\" : \" \"}</span>\n      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" value={props.volume} onChange={props.adjustVolume} />\n      </div>\n    </div>\n  );\n}\n\nclass DrumPad extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleKey = this.handleKey.bind(this);\n    this.playSound = this.playSound.bind(this);\n  } \n  playSound(){\n    if(this.props.power){\n      let sound = document.getElementById(this.props.letters);\n      this.props.newId(this.Mode[this.props.letters].id);\n      sound.currentTime = 0;\n      sound.play();\n    }\n  }\n  handleKey(e){\n    if(e.keyCode === this.Mode[this.props.letters].kCode){\n      this.playSound();\n    }\n  }\n  componentDidMount(){\n    document.addEventListener('keydown', this.handleKey);\n  }\n  componentWillUnmount(){\n    document.removeEventListener('keydown', this.handleKey);\n  }\n  render(){\n    let onClasses = this.props.power? 'drum-pad On': 'drum-pad Off';\n    this.Mode = this.props.mode? modeTwo: modeOne; \n    return(\n      <div className={onClasses} onClick={this.playSound} id={this.Mode[this.props.letters].id}>\n        <p>{this.props.letters}</p>\n        <audio src={this.Mode[this.props.letters].url} className=\"clip\"  id={this.props.letters}></audio>\n      </div>\n    );\n  } \n}\n\n\n\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}