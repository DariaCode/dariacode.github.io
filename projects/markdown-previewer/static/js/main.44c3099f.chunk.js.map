{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["placeholder","App","props","state","markdown","maxEditor","maxPreview","handleChange","bind","handleMaxEditor","handleMaxPreview","event","this","setState","target","value","classes","id","className","icon","onClick","text","onChange","React","Component","Editor","type","ToolbarEditor","title","ToolbarPreview","Preview","dangerouslySetInnerHTML","__html","marked","renderer","setOptions","breaks","Renderer","link","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAIMA,G,MAAW,+qCA+CXC,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAS,CACZC,SAAUJ,EACVK,WAAW,EACXC,YAAY,GAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBATP,E,0EAWNG,GACXC,KAAKC,SAAS,CACZT,SAAUO,EAAMG,OAAOC,U,wCAIzBH,KAAKC,SAAS,CACZR,WAAYO,KAAKT,MAAME,c,yCAIzBO,KAAKC,SAAS,CACZP,YAAaM,KAAKT,MAAMG,e,+BAI1B,IAAMU,EAAUJ,KAAKT,MAAME,UACrB,CAAC,8BACA,0BACA,8BACDO,KAAKT,MAAMG,WACX,CAAC,yBACA,+BACA,8BACD,CAAC,oBACA,qBACA,4BACP,OACE,yBAAKW,GAAG,kBACN,yBAAKC,UAAWF,EAAQ,GAAIC,GAAG,aAC7B,kBAAC,EAAD,CACEE,KAAMH,EAAQ,GACdI,QAASR,KAAKH,gBACdY,KAAK,WACP,kBAAC,EAAD,CAAQjB,SAAUQ,KAAKT,MAAMC,SAC3BkB,SAAUV,KAAKL,gBAEnB,yBAAKW,UAAWF,EAAQ,GAAIC,GAAG,eAC7B,kBAAC,EAAD,CACEE,KAAMH,EAAQ,GACdI,QAASR,KAAKF,iBACdW,KAAK,cACP,kBAAC,EAAD,CAAUjB,SAAUQ,KAAKT,MAAMC,iB,GAtDzBmB,IAAMC,WA6DlBC,EAAS,SAACvB,GACZ,OACE,yBAAKe,GAAG,UAAUC,UAAU,YAC1B,8BAAUD,GAAG,SACbF,MAAOb,EAAME,SACbkB,SAAUpB,EAAMoB,SAChBI,KAAK,WAIPC,EAAgB,SAACzB,GACnB,OACE,yBAAKgB,UAAU,mBAAmBD,GAAG,WACnC,4BAAI,0BAAMC,UAAU,aAAY,uBAAGU,MAAM,oBAAoBV,UAAU,sBACtEhB,EAAMmB,KADP,KAEA,4BAAQJ,GAAG,YAAYG,QAASlB,EAAMkB,QAASF,UAAU,YAAW,uBAAGA,UAAWhB,EAAMiB,UAK1FU,EAAiB,SAAC3B,GACtB,OACE,yBAAKgB,UAAU,mBAAmBD,GAAG,aACnC,4BAAI,0BAAMC,UAAU,aAAY,uBAAGU,MAAM,oBAAoBV,UAAU,qBACtEhB,EAAMmB,KADP,KAEA,4BAAQJ,GAAG,cAAcG,QAASlB,EAAMkB,QAASF,UAAU,YAAW,uBAAGA,UAAWhB,EAAMiB,UAK1FW,EAAU,SAAC5B,GACf,OACE,yBAAKe,GAAG,YAAYC,UAAU,YAC5B,yBAAKD,GAAG,UAAUc,wBAAyB,CAACC,OAAQC,IAAO/B,EAAME,SAAU,CAAE8B,SAAUA,SAK7FD,IAAOE,WAAW,CAChBC,QAAQ,IAGV,IAAMF,EAAW,IAAID,IAAOI,SAC5BH,EAASI,KAAO,SAAUC,EAAMX,EAAOP,GACrC,MAAO,mCAA4BkB,EAA5B,aAAqClB,GAAS,QAKxCpB,QCrJKuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44c3099f.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked'\nimport './App.css';\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nclass App extends React.Component{\n    constructor(props) {\n      super(props);\n      this.state =  {\n        markdown: placeholder,\n        maxEditor: false,\n        maxPreview: false\n      }\n      this.handleChange = this.handleChange.bind(this);\n      this.handleMaxEditor = this.handleMaxEditor.bind(this);\n      this.handleMaxPreview = this.handleMaxPreview.bind(this);\n    }\n    handleChange(event) {\n      this.setState({\n        markdown: event.target.value\n      });\n    }\n    handleMaxEditor() {\n      this.setState({\n        maxEditor: !this.state.maxEditor\n      });\n    }\n    handleMaxPreview() {\n      this.setState({\n        maxPreview: !this.state.maxPreview\n      });\n    }\n    render() {\n      const classes = this.state.maxEditor ? \n            ['editorWrap column maximized', \n             'previewWrap column hide', \n             'fas fa-compress-arrows-alt'] : \n            this.state.maxPreview ?\n            ['editorWrap column hide', \n             'previewWrap column maximized', \n             'fas fa-compress-arrows-alt'] :\n            ['editorWrap column', \n             'previewWrap column', \n             'fas fa-expand-arrows-alt'];\n      return (\n        <div id=\"main-container\">\n          <div className={classes[0]} id=\"inputArea\" > \n            <ToolbarEditor \n              icon={classes[2]} \n              onClick={this.handleMaxEditor}\n              text=\"Editor\"/>\n            <Editor markdown={this.state.markdown} \n              onChange={this.handleChange} />\n          </div>\n          <div className={classes[1]} id=\"displayArea\">\n            <ToolbarPreview\n              icon={classes[2]} \n              onClick={this.handleMaxPreview}\n              text=\"Previewer\"/>\n            <Preview  markdown={this.state.markdown}/>\n          </div>\n        </div> \n      )\n    }\n  };\n\nconst Editor = (props) => {\n    return (\n      <div id=\"input-B\" className=\"col-body\">\n        <textarea id=\"editor\"\n        value={props.markdown}\n        onChange={props.onChange}\n        type=\"text\"/>\n        </div>\n      )\n  }\nconst ToolbarEditor = (props) => {\n    return (\n      <div className=\"toolbar col-head\" id=\"input-H\">\n        <h1><span className=\"head-icon\"><i title=\"no-stack-dub-sack\" className=\"far fa-file-code\"/></span>      \n        {props.text} </h1>\n        <button id=\"input-btn\" onClick={props.onClick} className=\"head-btn\"><i className={props.icon}></i></button>\n      </div>\n   )\n}\n\nconst ToolbarPreview = (props) => {\n  return (\n    <div className=\"toolbar col-head\" id=\"display-H\">\n      <h1><span className=\"head-icon\"><i title=\"no-stack-dub-sack\" className=\"far fa-file-alt\"/></span>      \n      {props.text} </h1>\n      <button id=\"display-btn\" onClick={props.onClick} className=\"head-btn\"><i className={props.icon}></i></button>\n    </div>\n )\n}\n\nconst Preview = (props) => {\n  return (\n    <div id=\"display-B\" className=\"col-body\">\n      <div id='preview' dangerouslySetInnerHTML={{__html: marked(props.markdown, { renderer: renderer })}} />\n      </div>\n    )\n}\n\nmarked.setOptions({\n  breaks: true,\n});\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}