{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Calculator","props","state","calculated","formula","currentValue","previousValue","allClear","bind","mathOperators","numbers","decimal","equals","this","setState","value","val","target","test","number","num","length","slice","includes","currentFormula","replace","result","Math","round","eval","toString","className","Display","Buttons","React","Component","id","onClick"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,IAAD,MAAgBC,SAASC,eAAe,SD6HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gsCEjIbC,W,2BACJ,oBAAYC,GAAQ,IAAD,6IACjB,4QAAMA,KACDC,MAAQ,CACXC,YAAY,EACZC,QAAS,GACTC,aAAc,IACdC,cAAe,KAEhB,EAAKC,SAAW,EAAKA,SAASC,KAAd,6HAChB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,6HACrB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,6HACf,EAAKG,QAAU,EAAKA,QAAQH,KAAb,6HACf,EAAKI,OAAS,EAAKA,OAAOJ,KAAZ,6HAZE,E,4SAiBjBK,KAAKC,SAAS,CACZX,YAAY,EACZC,QAAS,GACTC,aAAc,IACdC,cAAe,Q,oCAILS,GACZ,IAAMC,EAAMD,EAAME,OAAOF,MACzBF,KAAKC,SAAS,CACZX,YAAY,EACZE,aAAeW,IAGbH,KAAKX,MAAMC,WACbU,KAAKC,SAAS,CACZV,QAASS,KAAKX,MAAMI,cAAgBU,IAG5B,UAAUE,KAAKL,KAAKX,MAAME,SAM1B,UAAUc,KAAKL,KAAKX,MAAME,SAIlB,MAARY,GACVH,KAAKC,SAAS,CACZV,QAASS,KAAKX,MAAMI,cAAgBU,IALtCH,KAAKC,SAAS,CACZV,SAAU,UAAUc,KAAKL,KAAKX,MAAME,QAAUY,GAAOH,KAAKX,MAAME,QAAUS,KAAKX,MAAMI,eAAgBU,IAPvGH,KAAKC,SAAS,CACZV,QAASS,KAAKX,MAAME,QAAUY,EAC9BV,cAAeO,KAAKX,MAAME,Y,8BAc1Be,GACN,IAAMC,EAAMD,EAAOF,OAAOF,MAC1BF,KAAKC,SAAS,CACZX,YAAY,IAGXU,KAAKX,MAAMC,WACZU,KAAKC,SAAS,CACZV,QAAiB,IAARgB,EAAYA,EAAM,GAC3Bf,aAAce,IAEPP,KAAKX,MAAMG,aAAagB,QAAU,IAC3CR,KAAKC,SAAS,CAEZV,QAAqC,MAA5BS,KAAKX,MAAMG,cAAgC,MAARe,EAAqC,KAAvBP,KAAKX,MAAME,QAAiBgB,EAAMP,KAAKX,MAAME,QAAU,iBAAiBc,KAAKL,KAAKX,MAAME,SAAWS,KAAKX,MAAME,QAAQkB,MAAM,GAAG,GAAKF,EAAMP,KAAKX,MAAME,QAAUgB,EAEzNf,aAA0C,MAA5BQ,KAAKX,MAAMG,cAAwB,SAASa,KAAKL,KAAKX,MAAMG,cAAgBe,EAAMP,KAAKX,MAAMG,aAAee,M,gCAM3HP,KAAKX,MAAMC,WACZU,KAAKC,SAAS,CACZX,YAAY,EACZC,QAAS,KACTC,aAAc,OAGNQ,KAAKX,MAAMG,aAAakB,SAAS,OAC3CV,KAAKC,SAAS,CACZX,YAAY,IAEX,UAAUe,KAAKL,KAAKX,MAAME,UAAyC,MAA5BS,KAAKX,MAAMG,cAA+C,KAAvBQ,KAAKX,MAAME,QACtFS,KAAKC,SAAS,CACZV,QAASS,KAAKX,MAAME,QAAU,KAC9BC,aAAc,OAGhBQ,KAAKC,SAAS,CACZV,QAASS,KAAKX,MAAME,QAAU,IAC9BC,aAAcQ,KAAKX,MAAME,QAAQf,MAAM,kBAAkB,GAAK,S,sCAQpE,IADA,IAAImC,eAAiBX,KAAKX,MAAME,QAC1B,UAAUc,KAAKM,iBACnBA,eAAiBA,eAAeF,MAAM,GAAG,GAE3CE,eAAiBA,eAAeC,QAAQ,KAAM,KAC9C,IAAIC,OAASC,KAAKC,MAAM,KAAgBC,KAAKL,iBAAiB,KAC9DX,KAAKC,SAAS,CACZX,YAAY,EACZC,QAASoB,eAAiB,IAAME,OAChCrB,aAAcqB,OAAOI,WACrBxB,cAAeoB,W,+BAMf,OACE,kEAAKK,UAAY,cACf,2DAACC,QAAD,CACA5B,QAAWS,KAAKX,MAAME,QACtBC,aAAgBQ,KAAKX,MAAMG,eAE3B,2DAAC4B,QAAD,CACA1B,SAAYM,KAAKN,SACjBE,cAAiBI,KAAKJ,cACtBC,QAAWG,KAAKH,QAChBC,QAAWE,KAAKF,QAChBC,OAAUC,KAAKD,c,YAlIEsB,6CAAMC,WA2IzBF,QAAU,SAAAhC,GACZ,OACE,kEAAK8B,UAAU,WACb,qEAAQK,GAAG,QAAQC,QAASpC,EAAMM,SAAUQ,MAAM,MAAlD,MACA,qEAAQqB,GAAG,SAASC,QAASpC,EAAMQ,cAAeM,MAAM,KAAxD,QACA,qEAAQqB,GAAG,QAAQC,QAASpC,EAAMS,QAASK,MAAQ,KAAnD,KACA,qEAAQqB,GAAG,QAAQC,QAASpC,EAAMS,QAASK,MAAQ,KAAnD,KACA,qEAAQqB,GAAG,OAAOC,QAASpC,EAAMS,QAASK,MAAQ,KAAlD,KACA,qEAAQqB,GAAG,WAAWC,QAASpC,EAAMQ,cAAeM,MAAM,KAA1D,KACA,qEAAQqB,GAAG,OAAOC,QAASpC,EAAMS,QAASK,MAAQ,KAAlD,KACA,qEAAQqB,GAAG,OAAOC,QAASpC,EAAMS,QAASK,MAAQ,KAAlD,KACA,qEAAQqB,GAAG,MAAMC,QAASpC,EAAMS,QAASK,MAAQ,KAAjD,KACA,qEAAQqB,GAAG,WAAWC,QAASpC,EAAMQ,cAAeM,MAAM,KAA1D,KACA,qEAAQqB,GAAG,MAAMC,QAASpC,EAAMS,QAASK,MAAQ,KAAjD,KACA,qEAAQqB,GAAG,MAAMC,QAASpC,EAAMS,QAASK,MAAQ,KAAjD,KACA,qEAAQqB,GAAG,QAAQC,QAASpC,EAAMS,QAASK,MAAQ,KAAnD,KACA,qEAAQqB,GAAG,MAAMC,QAASpC,EAAMQ,cAAeM,MAAM,KAArD,KACA,qEAAQqB,GAAG,OAAOC,QAASpC,EAAMS,QAASK,MAAQ,KAAlD,KACA,qEAAQqB,GAAG,UAAUC,QAASpC,EAAMU,SAApC,KACA,qEAAQyB,GAAG,SAASC,QAASpC,EAAMW,QAAnC,OAKAoB,QAAU,SAAA/B,GACd,OACE,kEAAKmC,GAAG,WACN,kEAAKA,GAAG,WAAWnC,EAAMG,SACzB,kEAAKgC,GAAG,gBAAgBnC,EAAMI,gBAKrBL,mC","file":"static/js/main.48359b4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './calculator.css'\nimport Calculator from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\nimport './calculator.css';\n\n/* Main Application */\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      calculated: false,\n      formula: \"\",\n      currentValue: \"0\",\n      previousValue: \"0\"\n     };\n     this.allClear = this.allClear.bind(this);\n     this.mathOperators = this.mathOperators.bind(this);\n     this.numbers = this.numbers.bind(this);\n     this.decimal = this.decimal.bind(this);\n     this.equals = this.equals.bind(this)\n\n  }\n/* function for AC button */\n  allClear() {\n    this.setState({\n      calculated: false,\n      formula: \"\",\n      currentValue: \"0\",\n      previousValue: \"0\"\n    });\n  }\n/* function for ÷,x,-,+ buttons */\n  mathOperators(value) {\n    const val = value.target.value;\n    this.setState({\n      calculated: false,\n      currentValue : val\n    });\n    /* After we have done the calculation and have the result (2+3=5) */\n    if (this.state.calculated) {\n      this.setState({\n        formula: this.state.previousValue + val\n      });\n     /* if the formula doesn't end with operator */ \n    } else if (!/[x/+-]$/.test(this.state.formula)) {\n      this.setState({\n        formula: this.state.formula + val,\n        previousValue: this.state.formula\n      }); \n       /* if the formula doesn't end with operator \"-\" */ \n    } else if (!/[x/+]-$/.test(this.state.formula)) {\n      this.setState({\n        formula: (/[x/+]-$/.test(this.state.formula + val) ? this.state.formula : this.state.previousValue)+ val\n      });\n    } else if ( val !== \"-\") {\n      this.setState({\n        formula: this.state.previousValue + val\n      });\n    }\n  };\n/* function for numbers' buttons */\nnumbers(number) {\n  const num = number.target.value;\n  this.setState({\n    calculated: false\n  });\n  /* After we have done the calculation and have the result (2+3=5) */\n  if(this.state.calculated){\n    this.setState({\n      formula: num !== 0 ? num : \"\",\n      currentValue: num\n    })\n  } else if (this.state.currentValue.length <= 20){\n    this.setState({\n      /* When inputting numbers, the calculator doesn't allow a number to begin with multiple zeros(00 or 3+00) */\n      formula: this.state.currentValue === \"0\" && num === \"0\" ? this.state.formula === \"\" ? num : this.state.formula : /([^.0-9]0|^0)$/.test(this.state.formula) ? this.state.formula.slice(0,-1) + num : this.state.formula + num ,\n      /* in case the current value is zero or operator, it's replaced by the number */\n      currentValue: this.state.currentValue === \"0\" || /[x/+-]/.test(this.state.currentValue) ? num : this.state.currentValue + num\n    });\n  }\n}\n/* function for decimal point buttons */\ndecimal(){\n  if(this.state.calculated){\n    this.setState({\n      calculated: false,\n      formula: \"0.\",\n      currentValue: \"0.\"\n    });\n    /* two decimal points in one number don't be accepted */\n  } else if (!this.state.currentValue.includes(\".\")) {\n    this.setState({\n      calculated: false\n    });\n    if(/[x/+-]$/.test(this.state.formula) || (this.state.currentValue === \"0\" && this.state.formula === \"\")){\n      this.setState({\n        formula: this.state.formula + \"0.\",\n        currentValue: \"0.\"\n      });\n    } else {\n      this.setState({\n        formula: this.state.formula + \".\",\n        currentValue: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + \".\"\n      })\n    }\n  }\n}\n/* function for equal sign buttons */\nequals(){\n  let currentFormula = this.state.formula;\n  while(/[x/+-]$/.test(currentFormula)) {\n    currentFormula = currentFormula.slice(0,-1);\n  } \n  currentFormula = currentFormula.replace(/x/g, \"*\");\n  let result = Math.round(1000000000000 * eval(currentFormula))/1000000000000;\n  this.setState({\n    calculated: true,\n    formula: currentFormula + \"=\" + result,\n    currentValue: result.toString(),\n    previousValue: result\n  })\n}\n\n\n  render() { \n    return ( \n      <div className = \"calculator\">\n        <Display \n        formula = {this.state.formula}\n        currentValue = {this.state.currentValue}\n        />\n        <Buttons \n        allClear = {this.allClear}\n        mathOperators = {this.mathOperators}\n        numbers = {this.numbers} \n        decimal = {this.decimal}\n        equals = {this.equals}\n        />\n      </div>\n     );\n  }\n\n};\n \n\nconst Buttons = props => {\n    return ( \n      <div className=\"buttons\">\n        <button id=\"clear\" onClick={props.allClear} value=\"AC\">AC</button>\n        <button id=\"divide\" onClick={props.mathOperators} value=\"/\">÷</button>\n        <button id=\"seven\" onClick={props.numbers} value = \"7\">7</button>\n        <button id=\"eight\" onClick={props.numbers} value = \"8\">8</button>\n        <button id=\"nine\" onClick={props.numbers} value = \"9\">9</button>\n        <button id=\"multiply\" onClick={props.mathOperators} value=\"x\">X</button>\n        <button id=\"four\" onClick={props.numbers} value = \"4\">4</button>\n        <button id=\"five\" onClick={props.numbers} value = \"5\">5</button>\n        <button id=\"six\" onClick={props.numbers} value = \"6\">6</button>\n        <button id=\"subtract\" onClick={props.mathOperators} value=\"-\">-</button>\n        <button id=\"one\" onClick={props.numbers} value = \"1\">1</button>\n        <button id=\"two\" onClick={props.numbers} value = \"2\">2</button>\n        <button id=\"three\" onClick={props.numbers} value = \"3\">3</button>\n        <button id=\"add\" onClick={props.mathOperators} value=\"+\">+</button>\n        <button id=\"zero\" onClick={props.numbers} value = \"0\">0</button>\n        <button id=\"decimal\" onClick={props.decimal}>.</button>\n        <button id=\"equals\" onClick={props.equals}>=</button>\n      </div>\n     );\n  };\n \n  const Display = props => {\n    return (\n      <div id=\"display\">\n        <div id=\"formula\">{props.formula}</div>\n        <div id=\"currentValue\">{props.currentValue}</div>\n      </div>\n    )\n  }\n\n  export default Calculator;\n"],"sourceRoot":""}