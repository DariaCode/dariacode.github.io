{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Pomodoro","props","state","break","session","runFlag","sessionType","time","setTime","bind","currentTime","startStop","handleTimer","playBeep","stopBeep","reset","setBreak","setSession","e","this","target","value","stateToUpdate","sign","currentLength","sessionNewType","setState","min","Math","floor","sec","clearInterval","countdown","setInterval","beep","document","getElementById","play","pause","className","labelType","string","decrement","increment","timeLength","displayLength","id","onClick","src","preload","React","Component","TimeSettings","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3909caf8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { clearInterval } from 'timers';\nimport { setInterval } from 'timers';\n\nclass Pomodoro extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = { \n      break: 5,\n      session: 25,\n      runFlag : false,\n      sessionType: \"session\",\n      time: 1500000 // 1500 secs equals 25 mins\n     }\n     this.setTime = this.setTime.bind(this);\n     this.currentTime = this.currentTime.bind(this);\n     this.startStop = this.startStop.bind(this);\n     this.handleTimer = this.handleTimer.bind(this);\n     this.playBeep = this.playBeep.bind(this);\n     this.stopBeep = this.startStop.bind(this);\n     this.reset = this.reset.bind(this);\n     this.setBreak = this.setBreak.bind(this);\n     this.setSession = this.setSession.bind(this)\n  }\n  setBreak(e) {\n    this.setTime(\"break\", e.target.value, this.state.break, \"session\")\n  }\n\n  setSession(e) {\n    this.setTime(\"session\", e.target.value, this.state.session, \"break\")\n  }\n\n  /* Function for setting break and session time and it's used into TimeSettings component */\n  setTime(stateToUpdate, sign, currentLength, sessionNewType){\n    if(this.state.runFlag) return; // doesn't allow to change the time during the countdown\n    if(this.state.sessionType === sessionNewType) {\n      if(sign === \"-\" && currentLength !== 1){\n        this.setState({\n          [stateToUpdate] : currentLength - 1\n        });\n      } else if(sign === \"+\" && currentLength !== 60){\n        this.setState({\n          [stateToUpdate] : currentLength + 1\n        });\n      }\n    } else {\n      if(sign === \"-\" && currentLength !== 1){\n        this.setState({\n          [stateToUpdate] : currentLength - 1,\n          time : currentLength * 60000 - 60000\n        });\n      } else if(sign === \"+\" && currentLength !== 60){\n        this.setState({\n          [stateToUpdate] : currentLength + 1,\n          time : currentLength * 60000 + 60000\n        });\n      }\n    }\n  }\n\n  /* Function that shows the current time */\n  currentTime(){\n    let min = Math.floor(this.state.time / 60000);\n    let sec = Math.floor(this.state.time % 60000) / 1000;\n    return (min < 10 ? \"0\" + min : min) + \":\" + (sec < 10 ? \"0\" + sec : sec);\n  }\n\n  startStop(){\n    if(this.state.runFlag) {\n      clearInterval(this.countdown);\n      this.setState({\n        runFlag : false\n      });\n      return;\n    }\n    clearInterval(this.countdown);\n    /* setInterval is a method that calls a function or runs some code\n     after specific intervals of time */\n    this.countdown = setInterval(this.handleTimer, 1000);\n    this.setState({\n      runFlag: true\n    });\n  }\n\n  handleTimer(){\n    if(this.state.time === 0 && this.state.sessionType === \"session\") {\n      this.playBeep();\n      this.setState({\n        sessionType: \"break\",\n        time: this.state.break * 60000\n      });\n      return;\n    }\n    if (this.state.time === 0 && this.state.sessionType === \"break\"){\n      this.playBeep();\n      this.setState({\n        sessionType: \"session\",\n        time: this.state.session * 60000\n      });\n      return;\n    }\n    this.setState({\n      time: this.state.time - 1000\n    });\n  }\n\n  reset(){\n    this.stopBeep();\n    clearInterval(this.countdown);\n    this.setState({\n      break: 5,\n      session: 25,\n      runFlag : false,\n      sessionType: \"session\",\n      time: 1500000\n    });\n  }\n\n  playBeep(){\n    let beep = document.getElementById(\"beep\");\n    beep.currentTime = 0;\n    beep.play();\n  }\n\n  stopBeep(){\n    let beep = document.getElementById(\"beep\");\n    beep.pause();\n    beep.currentTime = 0;\n  }\n\n  render() { \n    return ( \n      <div className=\"wrapper\">\n        <TimeSettings \n        labelType=\"break-label\"\n        string=\"break\"\n        decrement=\"break-decrement\"\n        increment=\"break-increment\"\n        timeLength=\"break-length\"\n        setTime={this.setBreak}\n        displayLength={this.state.break} />\n        <button id=\"start_stop\" onClick={this.startStop}>\n          {this.state.runFlag ? \"pause\" : \"start\"}\n        </button>\n        <div className=\"clock-wrap\">\n        <div className=\"clock\" id=\"time-left\">\n        <div id=\"timer-label\">\n          {this.state.sessionType}\n        </div>\n          {this.currentTime()}\n        </div>\n        </div>\n                \n        <button id=\"reset\" onClick={this.reset}>\n          reset</button>\n\n        <TimeSettings \n        labelType=\"session-label\"\n        string=\"session\"\n        decrement=\"session-decrement\"\n        increment=\"session-increment\"\n        timeLength=\"session-length\"\n        setTime={this.setSession}\n        displayLength={this.state.session} />\n        \n\n        <audio\n          src=\"https://goo.gl/65cBl1\"\n          id=\"beep\"\n          preload=\"true\"\n        />\n      </div>\n     );\n  }\n}\n\n/* Component for setting break and session times */\nconst TimeSettings = props => {\n  return (\n    <div className=\"time-settings\">\n      <div id = {props.labelType}>\n        {props.string}\n        </div>\n        <button\n        id = {props.decrement} \n        value=\"-\" \n        onClick={props.setTime}> - </button>\n        <div id={props.timeLength}>\n          {props.displayLength}\n        </div>\n        <button\n        id = {props.increment} \n        value=\"+\"\n        onClick={props.setTime}> + </button>\n    </div>\n  )\n}\nexport default Pomodoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Pomodoro from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}